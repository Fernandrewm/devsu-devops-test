name: CI Pipeline

on:
  push:
    branches: [ "main" ]
    paths:
      - 'devsu-demo-devops-python/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'devsu-demo-devops-python/**'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  test:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: ./devsu-demo-devops-python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest
        
    - name: Create env file
      working-directory: ./devsu-demo-devops-python
      run: |
        echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
        
    - name: Run tests with coverage
      working-directory: ./devsu-demo-devops-python
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      run: |
        coverage run manage.py test
        coverage report > coverage_report.txt
        coverage html
        echo "COVERAGE=$(coverage report | grep TOTAL | awk '{print $4}')" >> $GITHUB_ENV
        
    - name: Store coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          ./devsu-demo-devops-python/htmlcov
          ./devsu-demo-devops-python/coverage_report.txt
          
    - name: Comment PR with Coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const coverageReport = fs.readFileSync('./devsu-demo-devops-python/coverage_report.txt', 'utf8');
          const coverage = process.env.COVERAGE;
          
          const comment = `## Coverage Report: ${coverage}
          <details>
          <summary>View full details</summary>
          
          \`\`\`
          ${coverageReport}
          \`\`\`
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          })

  static-analysis:
    name: Static Code Analysis
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: ./devsu-demo-devops-python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint pylint-django
        
    - name: Create env file
      working-directory: ./devsu-demo-devops-python
      run: |
        echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
        
    - name: Run pylint
      working-directory: ./devsu-demo-devops-python
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      run: |
        pylint --load-plugins=pylint_django \
               --django-settings-module=demo.settings \
               --disable=C0111,C0114,C0115,C0116,R0903,C0103,R0901,W0221,W0613 \
               --max-line-length=120 \
               --ignore=migrations \
               api demo

  build-and-push:
    name: Build & Push Docker Image
    needs: [test, static-analysis]
    runs-on: ubuntu-latest
    #if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/devsu-demo
        tags: |
          type=raw,value=latest
          type=sha,format=short
    
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: ./devsu-demo-devops-python
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/devsu-demo:latest
        format: 'table'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  deploy:
    name: Deploy to Kubernetes
    needs: build-and-push
    runs-on: ubuntu-latest
    #if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Set up kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        
    - name: Update Kubernetes manifests
      run: |
        cd k8s
        sed -i "s|\${DATABASE_NAME}|'${{ secrets.DATABASE_NAME }}'|g" configmap.yaml
        sed -i "s|\${DATABASE_USER}|'${{ secrets.DATABASE_USER }}'|g" configmap.yaml
        sed -i "s|\${DATABASE_HOST}|'${{ secrets.DATABASE_HOST }}'|g" configmap.yaml
        sed -i "s|\${DATABASE_PORT}|'${{ secrets.DATABASE_PORT }}'|g" configmap.yaml
        sed -i "s|\${DJANGO_SECRET_KEY}|${{ secrets.DJANGO_SECRET_KEY }}|g" secret.yaml
        sed -i "s|\${DATABASE_PASSWORD}|${{ secrets.DATABASE_PASSWORD }}|g" secret.yaml
        
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl apply -f k8s/hpa.yaml
        
    - name: Verify deployment
      run: |
        kubectl -n devsu-demo-ns rollout status deployment/devsu-demo --timeout=180s
